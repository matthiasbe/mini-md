/home/matthias/cours/minimd/miniMD/ref/Obj_openmpi//setup.cpp: 349 - 515
--------------------------------------------------------------------------------

349:   int sx = 0;
350:   int sy = 0;
351:   int sz = 0;
352:   int ox = 0;
353:   int oy = 0;
354:   int oz = 0;
355:   int subboxdim = 8;
356: 
357:   int iflag = 0;
358: 
359:   while(oz * subboxdim <= khi) {
360:     k = oz * subboxdim + sz;
361:     j = oy * subboxdim + sy;
362:     i = ox * subboxdim + sx;
363: 
364:     if(iflag) continue;
365: 
366:     if(((i + j + k) % 2 == 0) &&
367:         (i >= ilo) && (i <= ihi) &&
368:         (j >= jlo) && (j <= jhi) &&
369:         (k >= klo) && (k <= khi)) {
370: 
371:       xtmp = 0.5 * alat * i;
372:       ytmp = 0.5 * alat * j;
373:       ztmp = 0.5 * alat * k;
374: 
375:       if(xtmp >= atom.box.xlo && xtmp < atom.box.xhi &&
376:           ytmp >= atom.box.ylo && ytmp < atom.box.yhi &&
377:           ztmp >= atom.box.zlo && ztmp < atom.box.zhi) {
378:         n = k * (2 * ny) * (2 * nx) + j * (2 * nx) + i + 1;
379: 
380:         for(m = 0; m < 5; m++) random(&n);
381: 
382:         vx = random(&n);
383: 
384:         for(m = 0; m < 5; m++) random(&n);
385: 
386:         vy = random(&n);
387: 
388:         for(m = 0; m < 5; m++) random(&n);
389: 
390:         vz = random(&n);
391: 
392:         atom.addatom(xtmp, ytmp, ztmp, vx, vy, vz);
393:       }
394:     }
395: 
396:     sx++;
397: 
398:     if(sx == subboxdim) {
399:       sx = 0;
400:       sy++;
401:     }
402: 
403:     if(sy == subboxdim) {
404:       sy = 0;
405:       sz++;
406:     }
407: 
408:     if(sz == subboxdim) {
409:       sz = 0;
410:       ox++;
411:     }
412: 
413:     if(ox * subboxdim > ihi) {
414:       ox = 0;
415:       oy++;
416:     }
417: 
418:     if(oy * subboxdim > jhi) {
419:       oy = 0;
420:       oz++;
421:     }
422:   }
423: 
424:   /* check for overflows on any proc */
425: 
426:   int me;
427:   MPI_Comm_rank(MPI_COMM_WORLD, &me);
428: 
429:   int iflagall;
430:   MPI_Allreduce(&iflag, &iflagall, 1, MPI_INT, MPI_MAX, MPI_COMM_WORLD);
431: 
432:   if(iflagall) {
433:     if(me == 0) printf("No memory for atoms\n");
434: 
435:     return 1;
436:   }
437: 
438:   /* check that correct # of atoms were created */
439: 
440:   int natoms;
441:   MPI_Allreduce(&atom.nlocal, &natoms, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
442: 
443:   if(natoms != atom.natoms) {
444:     if(me == 0) printf("Created incorrect # of atoms\n");
445: 
446:     return 1;
447:   }
448: 
449:   return 0;
450: }
451: 
452: /* adjust initial velocities to give desired temperature */
453: 
454: void create_velocity(double t_request, Atom &atom, Thermo &thermo)
455: {
456:   int i;
457: 
458:   /* zero center-of-mass motion */
459: 
460:   double vxtot = 0.0;
461:   double vytot = 0.0;
462:   double vztot = 0.0;
463: 
464:   for(i = 0; i < atom.nlocal; i++) {
465:     vxtot += atom.v[i * PAD + 0];
466:     vytot += atom.v[i * PAD + 1];
467:     vztot += atom.v[i * PAD + 2];
468:   }
469: 
470:   double tmp;
471:   MPI_Allreduce(&vxtot, &tmp, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
472:   vxtot = tmp / atom.natoms;
473:   MPI_Allreduce(&vytot, &tmp, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
474:   vytot = tmp / atom.natoms;
475:   MPI_Allreduce(&vztot, &tmp, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
476:   vztot = tmp / atom.natoms;
477: 
478:   for(i = 0; i < atom.nlocal; i++) {
479:     atom.v[i * PAD + 0] -= vxtot;
480:     atom.v[i * PAD + 1] -= vytot;
481:     atom.v[i * PAD + 2] -= vztot;
482:   }
483: 
484:   /* rescale velocities, including old ones */
485:   thermo.t_act = 0;
486:   double t = thermo.temperature(atom);
487:   double factor = sqrt(t_request / t);
488: 
489:   for(i = 0; i < atom.nlocal; i++) {
490:     atom.v[i * PAD + 0] *= factor;
491:     atom.v[i * PAD + 1] *= factor;
492:     atom.v[i * PAD + 2] *= factor;
493:   }
494: }
495: 
496: /* Park/Miller RNG w/out MASKING, so as to be like f90s version */
497: 
498: #define IA 16807
499: #define IM 2147483647
500: #define AM (1.0/IM)
501: #define IQ 127773
502: #define IR 2836
503: #define MASK 123459876
504: 
505: double random(int* idum)
506: {
507:   int k;
508:   double ans;
509: 
510:   k = (*idum) / IQ;
511:   *idum = IA * (*idum - k * IQ) - IR * k;
512: 
513:   if(*idum < 0) *idum += IM;
514: 
515:   ans = AM * (*idum);
516:   return ans;
517: }
